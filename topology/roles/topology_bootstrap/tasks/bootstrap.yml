---
- name: Create VPC
  ec2_vpc_net:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_access_key }}"
    cidr_block: 10.0.0.0/16
    name: Testbed_VPC
    region: "{{ ec2_region }}"
    state: present
  register: network

- name: Create Management Subnet
  ec2_vpc_subnet:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_access_key }}"
    state: present
    vpc_id: "{{ network.vpc.id }}"
    region: "{{ ec2_region }}"
    map_public: yes
    cidr: 10.0.1.0/24
    tags:
      Name: Testbed_Management_Subnet
  register: management_subnet

- name: Create Internal Subnet
  ec2_vpc_subnet:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_access_key }}"
    state: present
    vpc_id: "{{ network.vpc.id }}"
    region: "{{ ec2_region }}"
    cidr: 10.0.2.0/24
    tags:
      Name: Testbed_Internal_Subnet
  register: internal_subnet

- name: Create Internet Gateway for VPC
  ec2_vpc_igw:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_access_key }}"
    vpc_id: "{{ network.vpc.id }}"
    region: "{{ ec2_region }}"
    tags:
      Name: Testbed_IGW
    state: present
  register: igw

- name: Create Security Group for Public Connections (ssh-only)
  ec2_group:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_access_key }}"
    name: Testbed_Public_SecurityGroup
    description: Incoming SSH only
    vpc_id: "{{ network.vpc.id }}"
    region: "{{ ec2_region }}"
    rules:
      - proto: tcp
        ports:
          - 22
        cidr_ip: 0.0.0.0/0
        rule_desc: Allow inbound SSH
  register: public_security_group

- name: Create Security Group for Testbed-internal Connections (no restrictions)
  ec2_group:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_access_key }}"
    name: Testbed_Internal_SecurityGroup
    description: No restrictions
    vpc_id: "{{ network.vpc.id }}"
    region: "{{ ec2_region }}"
    rules:
      - proto: all
        cidr_ip: 0.0.0.0/0
        rule_desc: Allow all traffic
  register: internal_security_group

- name: Create Routing Table for Management Network (i.e. providing route to IGW)
  ec2_vpc_route_table:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_access_key }}"
    vpc_id: "{{ network.vpc.id }}"
    region: "{{ ec2_region }}"
    tags:
      Name: Testbed_Routing_Table
    subnets:
      - "{{ management_subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"
  register: routing_table

- name: Create Node Instances
  ec2:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_access_key }}"
    region: "{{ ec2_region }}"
    key_name: "{{ ssh_key_name }}"
    image: "{{ base_image }}" 
    assign_public_ip: yes 
    group_id: "{{ public_security_group.group_id }}"
    instance_type: "{{ item.flavor }}"
    wait: yes
    vpc_subnet_id: "{{ management_subnet.subnet.id }}"
    instance_tags:
      Name: "{{ item.name }}"
      InternalIP: "{{ item.internal_ip }}"
  with_items: "{{ nodes }}"
  register: instance_creation
  async: 60
  poll: 0

- name: Wait for EC2 instance creation to finish
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: instance_creation_jobs
  until: instance_creation_jobs.finished
  delay: 2
  retries: 30
  with_items: "{{ instance_creation.results }}"

- name: Get Facts about Nodes
  ec2_instance_facts:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_access_key }}"
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ network.vpc.id }}"
  register: ec2

- name: Attach Internal Interfaces
  ec2_eni:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_access_key }}"
    region: "{{ ec2_region }}"
    security_groups: "{{ internal_security_group.group_id }}"
    state: present
    attached: True
    device_index: 1
    private_ip_address: "{{ item.tags.InternalIP }}"
    subnet_id: "{{ internal_subnet.subnet.id }}"
    instance_id: "{{ item.instance_id }}"
  with_items: "{{ ec2.instances }}"
  register: enis
  async: 60
  poll: 0

- name: Wait for ENI attachment to finish
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: enis_jobs
  until: enis_jobs.finished
  delay: 2
  retries: 30
  with_items: "{{ enis.results }}"

- name: Set delete_on_termination on ENIs
  ec2_eni:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_access_key }}"
    region: "{{ ec2_region }}"
    eni_id: "{{ item.interface.id }}"
    delete_on_termination: true
  with_items: "{{ enis.results }}"
